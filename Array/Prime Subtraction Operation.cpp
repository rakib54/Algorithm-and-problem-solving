#include <bits/stdc++.h>
using namespace std;
#define ll long long

class Solution
{
public:
  bool isPrime[1001];

  void seive()
  {
    fill(isPrime, isPrime + 1000, true);
    isPrime[0] = false;
    isPrime[1] = false;

    for (int i = 2; i * i <= 1000; i++)
    {
      // if true and it's composite numbers generated by i
      if (isPrime[i])
      {
        for (int j = i * i; j <= 1000; j += i)
        {
          isPrime[j] = false;
        }
      }
    }
  }

  bool primeSubOperation(vector<int> &nums)
  {
    int n = nums.size();

    seive(); // populate isPrime arrray

    for (int i = n - 2; i >= 0; i--)
    {
      if (nums[i] < nums[i + 1])
      {
        continue;
      }

      // in case of nums[i] > nums[i+1] and decrese atleast nums[i+1]

      for (int p = 2; p < nums[i]; p++)
      {
        if (!isPrime[p])
        {
          continue;
        }
        // decrease as smaller prime as we can
        if (nums[i] - p < nums[i + 1])
        {
          nums[i] -= p;
          break;
        }
      }

      if (nums[i] >= nums[i + 1])
      {
        return false;
      }
    }

    return true;
  }
};

int main()
{
  Solution solution;
  vector<int> nums{4, 9, 6, 10};
  solution.primeSubOperation(nums);

  return 0;
}
